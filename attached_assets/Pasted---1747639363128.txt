Он пошагово объясняет, что и в каких файлах изменить / создать, чтобы реализовать функцию «Пригласить сотрудника» именно в твоём репозитории (Node + TS + Drizzle ORM + Resend/SendGrid).

⚠️ Перед запуском убедись, что проект открыт в Replit и AI-Assistant имеет доступ к файлам.
### Цель
Добавить эндпоинт /api/employees/invite, который:
1. Принимает e-mail сотрудника.
2. Создаёт пользователя с ролью EMPLOYEE и случайным паролем (10 символов).
3. Сохраняет в БД хэш пароля (scrypt — как в password.ts).
4. Отправляет письмо с логином/паролем через централизованную функцию sendEmail().
5. Возвращает 201 + {id, email}.

### Шаг 1 — роли
1. Открой `@shared/schema.ts` (или файл c enum UserRole).
2. Добавь новое значение:
```ts
export enum UserRole {
  OWNER = 'OWNER',
  ADMIN = 'ADMIN',
  TRAINER = 'TRAINER',
  EMPLOYEE = 'EMPLOYEE'   // new
}
Создай Drizzle-миграцию, которая добавляет 'EMPLOYEE' в enum-тип в БД.
Назови файл drizzle/2025-05-employee-role.sql и впиши SQL-ALTER.
Шаг 2 — утилиты пароля
В password.ts добавь функцию:
export const generatePassword = (len = 10) =>
  crypto.randomBytes(len * 2)
        .toString('base64')
        .replace(/[^a-zA-Z0-9]/g, '')
        .slice(0, len);
Убедись, что наружу экспортируются hashPassword, comparePasswords, generatePassword.
Шаг 3 — email-сервис
Ничего переписывать не нужно, просто проверь, что sendEmail() экспортируется из email.ts
и использует Resend → SendGrid → console fallback.

Шаг 4 — storage
В UserStorage.ts уже есть createUser() / getUserByUsername().
Ничего менять не надо — будем их вызывать из контроллера.

Шаг 5 — новый роутер
Создай routes/employeeRoutes.ts:

import { Router } from 'express';
import { UserRole } from '@shared/schema';
import { UserStorage } from '../storage/UserStorage';
import { generatePassword, hashPassword } from '../utils/password';
import { sendEmail } from '../services/email';

const router = Router();
const storage = new UserStorage();

router.post('/invite', async (req, res, next) => {
  try {
    const { email } = req.body as { email?: string };
    if (!email) return res.status(400).json({ message: 'Email обязателен' });

    if (await storage.getUserByUsername(email))
      return res.status(409).json({ message: 'Пользователь уже существует' });

    const plain = generatePassword(10);
    const password = await hashPassword(plain);

    const user = await storage.createUser({
      username: email.split('@')[0],
      email,
      role: UserRole.EMPLOYEE,
      password
    });

    await sendEmail({
      to: email,
      subject: 'Ваш доступ к Sports School CRM',
      html: `
        <p>Здравствуйте!</p>
        <p><b>Логин:</b> ${user.email}<br/>
           <b>Пароль:</b> ${plain}</p>
        <p>После входа смените пароль в личном кабинете.</p>`
    });

    res.status(201).json({ id: user.id, email: user.email });
  } catch (err) { next(err); }
});

export default router;
Шаг 6 — подключение роутера
В server.ts (или app.ts) добавь ДО других роутов:

import employeeRoutes from './routes/employeeRoutes';
app.use('/api/employees', employeeRoutes);
Шаг 7 — очистка дублирования
В userController.ts:
Удали собственную реализацию генерации/хэширования пароля, импортируй из password.ts.
Вместо прямого SDK SendGrid вызови sendEmail().
Проверь остальные файлы на прямое использование pbkdf2Sync — замени на hashPassword().
Шаг 8 — переменные окружения
Убедись, что в .env есть:

RESEND_API_KEY=...
SENDGRID_API_KEY=...
EMAIL_FROM=no-reply@sportschool-crm.ru
Шаг 9 — фронтенд
Если уже есть React-компонент InviteEmployeeModal:

Измени URL-запроса на /api/employees/invite.
(Опционально) добавь выбор роли из enum (UserRole).
Шаг 10 — тесты
pnpm drizzle-kit push — применить миграцию.
POST /api/employees/invite с телом {"email":"test@company.ru"} → 201.
Новый пользователь в БД, роль EMPLOYEE, password — scrypt-hash.
Письмо приходит (Resend лог OK).
Вход по свежему паролю работает через /api/auth/login.
Важно:
Не трогай существующие роли OWNER/ADMIN/TRAINER и их логику.
Все изменения делай только согласно шагам выше.
После завершения выведи список затронутых файлов и краткий отчёт.