Мне нужно создать полноценную CRM‑систему для спортивной школы, которая автоматизирует следующие процессы:

Запись на пробное занятие:
Родитель заполняет первичную заявку с полями:
ФИО ребёнка
Возраст
Контактный телефон
Выбор секции и филиала
Желаемая дата пробного занятия
Создаётся API‑эндпоинт, который сохраняет заявку в базе.
Администратору автоматически отправляется уведомление (например, по email или Telegram).
Назначение пробного занятия и уведомления:
В CRM появляется возможность администратору назначить пробное занятие (выбрать дату и время).
При назначении статус заявки меняется на «Пробное назначено».
Родитель получает автоматическое уведомление о назначенном пробном занятии.
За сутки до занятия отправляется напоминание.
Результат пробного занятия (Запись или отказ):
После проведения пробного занятия администратор выбирает результат:
Если родитель хочет записаться – отправляется ссылка на форму полной регистрации.
Если родитель отказывается – отправляется анкета обратной связи (для сбора статистики отказов).
CRM собирает статистику по отказам.
Полная регистрация ученика:
Родителю отправляется ссылка на форму полной регистрации.
Данные из первичной заявки подтягиваются автоматически, добавляются новые поля:
Паспортные данные родителя
Адрес
Email
Дополнительные контакты
После отправки формы данные обновляются в CRM.
Генерация PDF‑договора с подписью и печатью:
Автоматически генерируется договор в PDF по шаблону с автозаполнением, включающий изображение подписи и печати.
PDF сохраняется в CRM, и родителю отправляется уведомление с уникальной ссылкой для загрузки подписанной версии.
Уникальная ссылка для загрузки подписанного договора:
CRM генерирует уникальный токен для каждой записи.
Родитель по ссылке (например, https://crm-sportschool.com/upload-contract?token=xyz123) загружает подписанный договор, который автоматически прикрепляется к карточке ученика.
Хранение договора и уведомление администратора:
Загруженный договор сохраняется в CRM.
В карточке ученика появляется кнопка «Скачать договор».
Администратор получает уведомление о загруженном договоре.
Анализ отказов:
Родителю, отказавшемуся от пробного занятия, отправляется анкета обратной связи (с вариантами: цена, тренер, расположение и т.д.).
CRM собирает статистику отказов (количество отказов, основные причины, конверсия из пробных в записи).
Требования к реализации:

Архитектура:
Использовать современный стек: Backend – Express с TypeScript (или аналогичный), база данных (например, PostgreSQL); Frontend – React с Vite и Tailwind CSS.
Код должен быть структурирован в модульные файлы, каждый не превышает 300–400 строк (например, отдельные файлы для компонентов, хуков, API‑эндпоинтов).
Четко разделить frontend и backend, создать REST‑API для работы с заявками, назначениями, регистрацией, договором, загрузкой файлов и аналитикой отказов.
Реализовать автоматическую отправку уведомлений (можно использовать сторонний сервис или mock‑функции для уведомлений).
Функциональность:
Форма первичной заявки с валидацией и сохранением в базу.
Страница для администратора с возможностью назначения пробного занятия и отправки уведомлений.
Модуль обработки результата пробного занятия (запись/отказ) с генерацией ссылок на регистрацию или анкету.
Форма полной регистрации, которая обновляет данные ученика.
Генерация PDF‑договора с автозаполнением (с использованием ReportLab, PyMuPDF или другого инструмента) и автоматическая отправка родителю.
Модуль загрузки подписанного договора и его прикрепления к записи.
Модуль сбора и отображения статистики отказов.
На каждом этапе должны быть предусмотрены уведомления и обработка ошибок с соответствующими сообщениями.
UI:
Интерфейс должен быть удобным, использовать уже существующие UI‑компоненты (на основе Tailwind CSS, Lucide и т.д.).
Файлы React‑компонентов должны быть разбиты на небольшие, логически связанные части (например, отдельный компонент для таблицы посещаемости, отдельный для списка групп, отдельный для модальных окон).
Задача:
Пожалуйста, разработай полный рабочий код, который реализует описанную выше функциональность, начиная с модуля первичной заявки (Шаг 1). Код должен быть разбит на соответствующие файлы (frontend и backend) с ясной и понятной структурой, чтобы впоследствии не потребовался дополнительный рефакторинг. Не нужно сокращать код – все части должны быть включены и рабочими.